const N=new Set,A={processedMessages:N};function U(){const e=[],n="div._4k8w";return document.querySelectorAll(n).forEach((r,i)=>{var s;let g="Unknown Sender",d="",u=!1,a=`new-convo-${i}-${Date.now()}`;try{const p=r.querySelector(".xmi5d70");if(!p)return;g=p.textContent.trim();const h=p.classList.contains("x117nqv4"),w=p.classList.contains("x1fcty0u");if(u=h&&!w,!u)return;const k=r.querySelector("div._4k8y ._4ik4._4ik5");if(!k)return;if(d=k.textContent.trim(),d.toLowerCase().startsWith("you:")||d.toLowerCase().startsWith("you: ")){console.log("starting with you");const c=r.querySelector("div._a6ag._a6ah");try{c.click(),console.log("clicked unread...")}catch(C){console.log("Content.js: Error clicking conversation:",C)}return}const S=r.querySelector("div._a6ag._a6ah");let x=!1;if(S){let c=S;for(let C=0;C<5;C++){if(c.dataset.testid&&c.dataset.testid.includes("thread")){a=c.dataset.testid,console.log(`Content.js: Found stable conversation ID from data-testid: ${a}`),x=!0;break}if(c.href&&c.href.includes("thread_id="))try{const m=c.href.match(/thread_id=([^&]+)/);if(m&&m[1]){a=`thread-${m[1]}`,console.log(`Content.js: Found stable conversation ID from href: ${a}`),x=!0;break}}catch(m){console.log("Content.js: Error extracting thread ID from href:",m)}if(!c.parentElement)break;c=c.parentElement}}if(!x){let c=function(C){let m=0;for(let b=0;b<C.length;b++)m=(m<<5)-m+C.charCodeAt(b),m|=0;return Math.abs(m).toString().substring(0,6)};var l=c;a=`c${c(g)}`,console.log(`Content.js: Using short unique ID: ${a} for sender: ${g}`)}if(d){const c=`${a}:${(s=d==null?void 0:d.trim())==null?void 0:s.slice(0,50)}`;if(A.processedMessages.has(c)){console.log(`Content.js: Message already processed, skipping: ${c}`);return}r.setAttribute("data-chatgpt-conversation-id",a),e.push({id:`q-${a}`,text:d,sender:g,conversationId:a,previewElement:r}),console.log(`Content.js: Conv index ${i}, Sender "${g}": Successfully extracted UNREAD question: "${d}" (Conv ID: ${a}). Added to processing queue.`),r.classList.add("chatgpt-pending-response"),r.setAttribute("data-chatgpt-processing-time",Date.now().toString())}else console.log(`Content.js: Conv index ${i}, Sender "${g}": Message text was effectively empty before pushing to questions array, skipping.`)}catch(p){console.error("Content.js: Error processing a conversation:",p,r)}}),e.length===0&&console.log("Content.js: No new, unread messages."),e}const j=new Set;let _=!1,O=null;const o={isAttemptingDelivery:_,currentResponseToDeliver:O},F=`
  position: fixed;
  bottom: 60px;
  right: 60px;
  background-color: #0084ff;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 8px 16px;
  font-size: 14px;
  font-weight: bold;
  cursor: pointer;
  z-index: 9999;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
`;function T(){console.log("Content.js: Clearing visual markers from processed conversations"),document.querySelectorAll(".chatgpt-pending-response").forEach(n=>{console.log("Content.js: Clearing visual pending marker from element:",n.getAttribute("data-chatgpt-conversation-id")),n.classList.remove("chatgpt-pending-response")})}function z(e,n=5e3){return new Promise(t=>{let i=0;const g=setInterval(()=>{const d=document.querySelector(e);d&&(clearInterval(g),t(d)),i+=100,i>=n&&(clearInterval(g),console.warn(`Content.js: waitForElementOnPage timed out for selector: ${e}`),t(null))},100)})}function P(){const e=document.getElementById("meta-suite-next-button");e&&e.remove();const n=document.createElement("button");n.id="meta-suite-next-button",n.textContent="Next",n.style.cssText=F,n.addEventListener("click",()=>{D(!0),console.log("Content.js: Next button clicked. Set isPartialChecking to true."),T(),o.currentResponseToDeliver&&(o.currentResponseToDeliver=null),o.isAttemptingDelivery=!1,setTimeout(f,500),n.textContent="Scanning...",setTimeout(()=>{n.textContent="Next"},1500)}),document.body.appendChild(n),console.log("Content.js: Added 'Next' button to the page.")}function I(e){var t,r;const n=`${e.conversationId}:${(r=(t=e.originalQuestionText)==null?void 0:t.trim())==null?void 0:r.slice(0,50)}`;A.processedMessages.add(n)}const E=2;async function B(e){if(e.length!==0){if(console.log(`Content.js: Processing ${e.length} questions with delay between each`),window.isPartialAutomationEnabled&&!Q()){console.log("Content.js: In partial mode with isPartialChecking=false. Skipping question processing to prevent multiple triggers.");return}for(let n=0;n<e.length;n++){const t=e[n];n>0&&await new Promise(i=>setTimeout(i,15e3));let r;t.conversationId&&!t.conversationId.startsWith("new-convo-")?r=t.conversationId+"||"+t.text:r=t.sender+"||"+t.text;try{if(j.has(r)){console.log('Skipping as it previously resulted in "NOTFOUND"'),t.previewElement&&t.previewElement.classList.contains("chatgpt-pending-response")&&t.previewElement.classList.remove("chatgpt-pending-response");continue}if(console.log(`Content.js: Sending question to background: "${t.text}" (Sender: ${t.sender}, Conv ID: ${t.conversationId})`),t.previewElement&&(t.previewElement.classList.add("chatgpt-pending-response"),console.log(`Content.js: Marked conversation ${t.conversationId} as 'chatgpt-pending-response'.`)),chrome.runtime.lastError){console.error("Content.js: Error in sendQuestionsToBackground:",chrome.runtime.lastError.message),t.previewElement&&t.previewElement.classList.remove("chatgpt-pending-response");continue}const i=`Customer-id-${t.conversationId}
Question: `,g=Date.now().toString().slice(-6),d=i+t.text,u=await chrome.runtime.sendMessage({action:"getAnswerFromChatGPT",question:d,conversationId:t.conversationId,requestId:g});if(chrome.runtime.lastError){console.error("Content.js: Error sending message to background (getAnswerFromChatGPT):",chrome.runtime.lastError.message),t.previewElement&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${t.conversationId} from 'chatgpt-pending-response' due to send error.`));continue}if(u&&u.answer){if(console.log(`Content.js: Received answer for ${t.conversationId}: "${u.answer}"`),u.answer==="NOTFOUND"||u.answer.includes("NOTFOUND")){j.add(r),t.previewElement&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked ${t.conversationId} from pending due to "NOTFOUND".`)),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1;continue}t.previewElement&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked ${t.conversationId} from pending, preparing for delivery.`)),o.currentResponseToDeliver={conversationId:t.conversationId,sender:t.sender,originalQuestionText:t.text,answer:u.answer,originalPreviewElement:t.previewElement,retries:0},q();break}else u&&u.error?(console.error(`Content.js: Error from background for question "${t.text}":`,u.error),u.error.includes("Another ChatGPT request is already in progress")?(console.log(`Content.js: Detected "Another ChatGPT request is already in progress" error for conversation ${t.conversationId}`),setTimeout(()=>{t.previewElement&&document.body.contains(t.previewElement)&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Removed 'chatgpt-pending-response' class from conversation ${t.conversationId} after timeout`))},1e4)):t.previewElement&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${t.conversationId} from 'chatgpt-pending-response' due to ChatGPT error: ${u.error}`))):(console.log(`Content.js: No valid answer or error received from background for: "${t.text}"`),t.previewElement&&(t.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${t.conversationId} from 'chatgpt-pending-response' due to no answer/error.`)))}catch(i){if(console.error(`Content.js: Error in sendQuestionsToBackground loop for question "${t.text}":`,i),i.message&&i.message.includes("Receiving end does not exist")){console.warn("Content.js: Extension context invalidated. Please reload the page.");break}}}}}async function q(){var t,r;if(!o.currentResponseToDeliver){o.isAttemptingDelivery=!1;return}if(o.isAttemptingDelivery)return;o.isAttemptingDelivery=!0;const e=o.currentResponseToDeliver;e.originalQuestionText.length>30?`${e.originalQuestionText.substring(0,30)}`:e.originalQuestionText;let n=!1;try{let i=((t=e.originalPreviewElement)==null?void 0:t.querySelector("div._a6ag._a6ah"))||e.originalPreviewElement,g=!1;const d="div._4k8w",u=document.querySelectorAll(d);for(const a of u){const l=a.querySelector(".xmi5d70");if(l&&l.textContent.trim()===e.sender.trim()){i=a;break}}if(!i||!document.body.contains(i)){console.warn(`Content.js: Delivery - Conversation preview element for ID ${e.conversationId} (Sender: ${e.sender}) is NOT FOUND or STALE. Aborting delivery for this response.`),e.retries=E,o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(f,500);return}else{console.log(`Content.js: Delivery - Attempting to click conversation preview for Conv ID: ${e.conversationId}, Sender: ${e.sender}:`,i);try{console.log(`Content.js: Clicking on conversation element for ${e.conversationId}...`),i.click(),await new Promise(s=>setTimeout(s,2e3));const a="div[role='main'] span.x1lliihq.x1plvlek.xryxfnj.x1n2onr6.x193iq5w.xeeoieq.x1fj2vde.x100vrsf.x1jchvi3.x1fcty0u.x132q4wb.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1s65kcs.x1ypdohk.x78zum5.x1i64zmx.x1rdy4ex.x17w43d7.x1ye3gou.xt62z39.x1x521is.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1q0g3np.x87ps6o.x1lku1pv.x1a2a7pz.x6s0dn4.x10wh9bi.x1wdrske.x8du52y.x17z4h18",l=document.querySelector(a);if(l){const s=l.textContent.trim();if(console.log(`Content.js: Delivery - Post-click: Intended sender: "${e.sender}", Active chat sender found in UI: "${s}"`),s!==(e==null?void 0:e.sender)){console.error(`Content.js: Delivery - CRITICAL MISMATCH! Clicked on preview for "${e.sender}" but active chat is with "${s}".`),console.error("Content.js: Delivery - Aborting to prevent sending response to the wrong person!"),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(f,500);return}}else console.warn(`Content.js: Delivery - Post-click: Could not identify active chat sender name in UI to verify target for "${e.sender}".`);try{const s=document.querySelectorAll('div[role="row"]');if(s&&s.length>0){const h=!s[s.length-1].querySelector('div[data-author-is-self="true"]');if(console.log(`Content.js: Delivery - Last message appears to be from ${h?"customer":"us/page"}`),h)console.log("Content.js: Delivery - Last message is from customer, proceeding with delivery.");else{console.warn("Content.js: Delivery - Aborting response as the last message is not from the customer but from us/page."),e.retries=E,o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(f,500);return}}else console.warn("Content.js: Delivery - Could not find message containers to check last message sender.")}catch(s){console.error("Content.js: Delivery - Error checking last message sender:",s)}g=!0}catch(a){console.error("Content.js: Delivery - Click failed:",a,i)}}if(g){const a='textarea[placeholder="Reply in Messenger…"]';let l=await z(a,7e3);if(!l){const s='div[aria-label*="Message"][role="textbox"], textarea[placeholder*="Message"], div[data-lexical-editor="true"]';console.warn(`Content.js: Delivery - Specific input '${a}' not found. Trying fallback: ${s}`),l=document.querySelector(s)}if(l){l.focus(),l.value="",l.dispatchEvent(new Event("input",{bubbles:!0,composed:!0})),l.value=e.answer,l.dispatchEvent(new Event("input",{bubbles:!0,composed:!0})),l.dispatchEvent(new Event("change",{bubbles:!0,composed:!0})),console.log(`Content.js: Delivery - Set text in input field for ${e.conversationId}.`);let s=null;const p=['button[aria-label="Send"]','button[data-testid="messenger_send_button"]','button[aria-label*="Send message"]','div[aria-label="Send"][role="button"]'];for(const h of p){let w=l.closest('div[role="complementary"], div[role="form"], div[class*="chat"], div[class*="composer"]')||((r=l.parentElement)==null?void 0:r.parentElement);if(w&&(s=w.querySelector(h)),s||(s=document.querySelector(h),s))break}if(s&&!s.disabled){if(window.isPartialAutomationEnabled)return D(!1),P(),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,I(e),!0;console.log("Content.js: Delivery - Send button found and enabled. Clicking.",s),s.click(),D(!0),n=!0}else s!=null&&s.disabled?console.warn("Content.js: Delivery - Send button found but is DISABLED."):console.warn("Content.js: Delivery - Send button NOT FOUND.")}else console.warn(`Content.js: Delivery - Message input field not found for ${e.conversationId}.`)}else console.warn(`Content.js: Delivery - Skipping input/send because click on conversation preview failed or element not found for ${e.conversationId}.`)}catch(i){console.error("Content.js: Delivery - Error during delivery attempt:",i),n=!1}if(n){try{I(e)}catch(i){console.log("messageKey did not added",i)}o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(f,500)}else console.warn(`Content.js: Delivery attempt #${e.retries+1} failed for ${e.conversationId}.`),e.retries++,e.retries<E?(console.log(`Content.js: Scheduling retry for ${e.conversationId}.`),o.isAttemptingDelivery=!1,setTimeout(q,5e3)):(console.error(`Content.js: Max retries reached for ${e.conversationId}. Giving up on this response.`),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(f,500))}const $=5e3;let v=null,y=!0;function D(e){y=e,console.log(`Content.js: isPartialChecking set to ${e}`)}function Q(){return y}async function f(){if(o.isAttemptingDelivery){console.log("Content.js: Automation cycle paused. A delivery attempt is already in progress (isAttemptingDelivery is true). Not scanning for new messages now.");return}const e=await chrome.runtime.sendMessage({action:"getSettings"});if(chrome.runtime.lastError){console.error("Content.js: Error getting settings in runAutomationCycle:",chrome.runtime.lastError.message);return}if(window.isPartialAutomationEnabled=e.isPartialAutomation===!0,window.isPartialAutomationEnabled&&console.log("Content.js: Partial Automation mode enabled. Responses will be placed in input box but not sent automatically."),window.isPartialAutomationEnabled&&!y){console.log("Content.js: Skipping conversation scanning because isPartialChecking is false while in Partial Automation mode.");return}else window.isPartialAutomationEnabled||(y=!0);if(o.currentResponseToDeliver){console.log("Content.js: Automation cycle paused. A response is already staged for delivery.");return}const n=document.querySelectorAll(".chatgpt-pending-response");if(n.length>0){console.log(`Content.js: Automation cycle paused. There are ${n.length} conversations with pending responses.`);return}if(e&&e.isEnabled){const t=U();t.length>0?await B(t):j.size>0}}function R(){console.log("Content.js: Attempting to start automation with new logic..."),v&&(clearInterval(v),v=null),y=!0,console.log("Content.js: Reset isPartialChecking to true during automation start."),T(),P(),f(),v=setInterval(f,$),console.log(`Content.js: Polling interval started with ID ${v} for every ${$}ms.`),console.log("Content.js: Relying solely on polling interval for message scanning.")}function M(){console.log("Content.js: Stopping automation."),v&&(clearInterval(v),console.log(`Content.js: Polling interval ${v} stopped.`),v=null),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1}function G(){o.currentResponseToDeliver&&(console.log(`Content.js: Clearing current response delivery for ${currentResponseToDeliver.conversationId} to allow fresh scanning.`),o.currentResponseToDeliver=null),o.isAttemptingDelivery=!1}console.log("Meta Suite ChatGPT Bridge content script loaded.");async function L(){const e=await chrome.runtime.sendMessage({action:"getSettings"});if(chrome.runtime.lastError){console.error("Content.js: Error getting settings for initial automation setup:",chrome.runtime.lastError.message);return}e&&e.isEnabled?R():console.log("Content.js: Initial settings indicate automation is disabled.")}L();chrome.storage.onChanged.addListener((e,n)=>{n==="sync"&&e.isEnabled!==void 0&&(console.log("Content.js: isEnabled setting changed to",e.isEnabled.newValue),e.isEnabled.newValue?R():M())});chrome.runtime.onMessage.addListener((e,n,t)=>{if(e.action==="settingsUpdated")return console.log("Content.js: Notified of settings update. Re-evaluating automation cycle."),chrome.runtime.sendMessage({action:"getSettings"},r=>{r!=null&&r.isPartialAutomation||(isPartialChecking=!0,console.log("Content.js: Partial automation disabled, reset isPartialChecking to true")),M(),L()}),t({status:"Settings acknowledged by content script"}),!0;if(e.action!=="injectResponse"){if(e.action==="clearCurrentResponse")return console.log("Content.js: Received clearCurrentResponse request"),G(),t({status:"Current response cleared"}),!0}return console.log("Content.js: Received unhandled message action:",e.action),!1});
